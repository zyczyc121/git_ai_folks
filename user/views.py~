from django.shortcuts import render, redirect
from django.contrib.sites.shortcuts import get_current_site
from django.utils.encoding import force_bytes, force_text
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.template.loader import render_to_string
from django.contrib.auth import authenticate, login as django_login, logout as django_logout
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from .forms import LoginForm, SignUpForm
from .tokens import account_activation_token
# Create your views here.

def login(request):
    if request.user.is_authenticated():
        return HttpResponseRedirect('index')

    if request.method == 'POST':
        form = LoginForm(request.POST)

        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                django_login(request, user)
                return HttpResponseRedirect(reverse('index'))
            else:
                form.add_error(Invalid, "Invalid username or password")
                return HttpResponse(form.errors.as_json())
        else:
            return HttpResponse(form.errors.as_json())
    
    else:
        form = LoginForm()

    return render(request, 'user/login.html', {'form': form })

def logout(request):
    django_logout(request)
    return render(request, "ai_index.html", {'user': request.user })

def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            user = form.save()
            #user = form.save(commit=False)
            #user.is_active = False
            user.save()
            #current_site = get_current_site(request)
            #subject = 'Activate Your Account'
            #message = render_to_string('user/account_activation_email.html', {
            #    'user': user,
            #    'domain': current_site.domain,
            #    'uid': urlsafe_base64_encode(force_bytes(user.pk)),
            #    'token': account_activation_token.make_token(user),
            #})
            #user.email_user(subject, message)
            #return redirect('user/account_activation_sent')
            return render(request, 'ai_index.html')
        else:
            return HttpResponse(form.errors.as_json())
    else:
        form = SignUpForm()
    return render(request, "user/signup.html", {'form': form})

def account_activation_sent(request):
    return render(request, 'user/account_activation_sent.html')

def activate(request, uidb64, token):
    try:
        uid = force_text(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        user = None

    if user is not None and account_activation_token.check_token(user, token):
        user.is_active = True
        user.profile.email_confirmed = True
        user.save()
        django_login(request, user)
        return render(request, "user/account_activation_success.html")
    else:
        return render(request, "user/account_activation_invalid.html")
